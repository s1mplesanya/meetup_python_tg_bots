import telebot
from telebot import types

from config import token

# –ó–∞–º–µ–Ω–∏—Ç–µ 'token' (—Ñ–∞–π–ª config.py) –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(token)

# –ó–∞–º–µ–Ω–∏—Ç–µ ID —Å–µ–±—è (–µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∑–∞–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å, –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω –≤ | |, –æ–Ω –∂–µ message.from_user.id)
myUserId = 123456789

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
questions = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
item_ask_question = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì")
item_about_us = types.KeyboardButton("–û–±–æ –º–Ω–µ üë®‚Äçüíª")
main_menu.add(item_ask_question)
main_menu.add(item_about_us)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∏—Ç—å
answer_markup = types.InlineKeyboardMarkup()
item_answer = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='answer')
answer_markup.add(item_answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–≤–æ–¥–∏–º –≤ –±–æ—Ç–∞
@bot.message_handler(content_types='text')
def main_menu_handler(message):
    user_id = message.chat.id
    if message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì":
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ü§∑‚Äç‚ôÇÔ∏è", reply_markup=types.ReplyKeyboardRemove()) # reply_markup=types.ReplyKeyboardRemove() - —É–¥–∞–ª—è–µ—Ç reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ mainMenu)
        bot.register_next_step_handler(message, save_question)
    elif message.text == "–û–±–æ –º–Ω–µ üë®‚Äçüíª":
        # –≤—ã–≤–µ–¥–∏—Ç–µ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ   
        pass
    else:
        # —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –Ω–∞—à –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞ –Ω–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
        bot.send_message(user_id, message.text, reply_markup=main_menu, parse_mode="Markdown")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ myUserId
def save_question(message):
    user_id = message.from_user.id
    question_text = message.text.strip()
    if question_text != "":
        questions[str(user_id)] = question_text
        # –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–¥–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –∏ myUserId (–µ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '|{message.chat.id}|', 
        # –∏–Ω–∞—á–µ –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –æ—Ñ–æ—Ä–º–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ 
        # —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ user_id reply_markup —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        # P.S. parse_mode="Markdown" –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ö –ø—Ä–∏–º–µ—Ä—É "*–í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*" - –¥–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º, _text_ - –∫—É—Ä—Å–∏–≤

    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å ‚ùå", reply_markup=main_menu, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == 'answer')
def answer_question(call):
    user_id = call.from_user.id
    message_text = call.message.text
    question_sender_id = message_text.split('|')[1].split('|')[0]

    if user_id == myUserId:
        if question_sender_id in questions:
            # —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é msg —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id –æ –ø—Ä–æ—Å—å–±–µ –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            # —Å–æ–∑–¥–∞–π—Ç–µ register_next_step_handler —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º msg –∏ —Ñ—É–Ω–∫—Ü–∏–µ–π inputAnswer, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–∞–∫–∂–µ —Ç—É–¥–∞ question_sender_id
            pass # pass –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è "–ø—É—Å—Ç–æ—Ç–æ–π", –µ–≥–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
        else:
            bot.send_message(user_id, "–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ üôÖ‚Äç‚ôÇÔ∏è", parse_mode="Markdown")
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.", parse_mode="Markdown")


      
def inputAnswer(message, question_sender_id):
    answerText = message.text.strip()
    user_id = message.chat.id

    # –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ user_id –æ–± —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–µ
    # –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ int(question_sender_id) –æ —Ç–æ–º, —á—Ç–æ –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª {message.from_user.first_name} –∏ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –∑–∞–±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç {answerText}

    questions.pop(question_sender_id) # —É–¥–∞–ª—è–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å, –∏–∑ —Å–ª–æ–≤–∞—Ä—è


def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Control+Z –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

    # –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == "__main__":
    main()